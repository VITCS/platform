AWSTemplateFormatVersion: 2010-09-09
Transform: "AWS::Serverless-2016-10-31"

###############################################################################
#    Parameters
###############################################################################
Parameters:
  Application:
    Type: String
  Module:
    Type: String
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 1
    Description: CloudWatch Logs retention period for Lambda functions
  EventBusName:
    Type: String
    Description: EventBridge Event Bus Name
  NodeLayerArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Node Layer NodeDependenciesLayer ARN

###############################################################################
#    Globals
###############################################################################
Globals:
  Function:
    Runtime: nodejs16.x
    Handler: index.handler
    Layers:
      - !Ref NodeLayerArn
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        EVENT_BUS_NAME: !Ref EventBusName
        POWERTOOLS_SERVICE_NAME: producerusers
        POWERTOOLS_TRACE_DISABLED: false
        LOG_LEVEL: !Ref LogLevel

Resources:
  ###############################################################################
  #    Producer User Pool
  ###############################################################################
  ProducerUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Application}-${Environment}-${Module}-produceruserpool
      AutoVerifiedAttributes:
        - email
        - phone_number
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: middle_name
          AttributeDataType: String
          Mutable: true
          Required: false
      AliasAttributes:
        - email
        - phone_number
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_phone_number
            Priority: 1
          - Name: verified_email
            Priority: 2
      SmsConfiguration:
        SnsCallerArn: !GetAtt CognitoSNSRole.Arn
      UserPoolTags:
        Environment: !Ref Environment
        Application: !Ref Application
        Module: !Ref Module
      LambdaConfig:
        CustomMessage: !GetAtt CustomMessageFunction.Arn
        PreSignUp: !GetAtt PreSignUpFunction.Arn
        PreTokenGeneration: !GetAtt PreTokenGenFunction.Arn
      UserPoolTags: 
        Environment: !Ref Environment
        Application: !Ref Application
        Module:      !Ref Module

  ProducerUserPoolNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Application}/${Environment}/${Module}/produceruserpool/id
      Type: String
      Value: !Ref ProducerUserPool
      Tags:
        Environment: !Ref Environment
        Application: !Ref Application
        Module: !Ref Module

  ProducerAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: m-admin
      UserPoolId: !Ref ProducerUserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref ProducerUserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      RefreshTokenValidity: 30
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH #Enable admin based user password authentication flow
        - ALLOW_REFRESH_TOKEN_AUTH # should always be an accepted auth flow
  ProducerUserPoolClientParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Application}/${Environment}/${Module}/produceruserpoolclient/id
      Type: String
      Value: !Ref UserPoolClient
      Tags:
        Environment: !Ref Environment
        Application: !Ref Application
        Module: !Ref Module
  ###############################################################################
  #    UserPool Domain
  ###############################################################################
  ProducerUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub 1800spirits-producer-${Environment}
      UserPoolId: !Ref ProducerUserPool

  ##############################################################################
  ##   Cognito unauthenticated identity pool
  ##############################################################################
  ProducerLocationIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${Application}-${Environment}-${Module}-producerlocationidentitypool
      AllowUnauthenticatedIdentities: true
      AllowClassicFlow: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt ProducerUserPool.ProviderName
          ServerSideTokenCheck: true ##identity pool checks with the integrated user pools to make sure the user has not been globally signed out or deleted before the identity pool provides an OIDC token or Amazon credentials for the user.

  # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref ProducerLocationIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource: "*"

  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref ProducerLocationIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                  - geo:GetMapStyleDescriptor
                  - geo:GetMapGlyphs
                  - geo:GetMapSprites
                  - geo:GetMapTile
                  - geo:SearchPlaceIndex*
                  - geo:CalculateRoute
                  - geo:BatchGetDevicePosition
                  - geo:GetGeofence
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
  CognitoSNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CognitoSNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource: "*"
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref ProducerLocationIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  ProducerLocationIdentityPoolNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Application}/${Environment}/${Module}/producerlocationidentitypool/id
      Type: String
      Value: !Ref ProducerLocationIdentityPool
      Tags:
        Environment: !Ref Environment
        Application: !Ref Application
        Module: !Ref Module

  ###############################################################################
  #    Functions
  ###############################################################################

  ###############################################################################
  #    Custom Message
  ###############################################################################
  CustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src-custommessage
      Handler: custom_message.handler
      FunctionName: !Sub ${Application}-${Environment}-${Module}-ProducerUserPool-CustomMessageFunction     
      Policies:
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: "*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:*
              Resource:
                - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*

      Tags:
        Environment: !Ref Environment
        Application: !Ref Application
        Module: !Ref Module

  CustomMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CustomMessageFunction}
      RetentionInDays: !Ref RetentionInDays

  ########################################################################### PreSignUp
  ############################################################################
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src-presignup
      Handler: pre_signUp.handler
      FunctionName: !Sub ${Application}-${Environment}-${Module}-ProducerUserPool-PreSignupFunction      
      Policies:
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: "*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:*
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-ProducerUser
                - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
      Tags:
        Environment: !Ref Environment
        Application: !Ref Application
        Module: !Ref Module

  PreSignUpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PreSignUpFunction}
      RetentionInDays: !Ref RetentionInDays

  ###############################################################################
  #    PostSignUp
  ###############################################################################
  # SignUpFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: ./src
  #     FunctionName: !Sub ${Application}-${Environment}-${Module}-CustomerUserPool-SignupFunction
  #     Environment:
  #       Variables:
  #           CustomerProfileTable: !Sub ${Application}-${Environment}-CustomerProfile
  #           CustomerContactTable: !Sub ${Application}-${Environment}-CustomerContact
  #           CustomerPaymentTable: !Sub ${Application}-${Environment}-CustomerPayment
  #           APPLICATION: !Ref Application
  #           MODULE: !Ref Module
  #           ENVIRONMENT: !Ref Environment
  #           EVENT_BUS_NAME: !Ref EventBusName
  #     Events:
  #       CognitoSignUp:
  #         Type: Cognito
  #         Properties:
  #           UserPool: !Ref CustomerUserPool
  #           Trigger: PostConfirmation     
  #    Policies:
  #      - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
  #       - Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Action:
  #               - events:PutEvents
  #             Resource: "*"
  #       - Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Action:
  #               - cognito-idp:*
  #               - dynamodb:BatchGetItem
  #               - dynamodb:BatchWriteItem
  #               - dynamodb:PutItem
  #               - dynamodb:DeleteItem
  #               - dynamodb:GetItem
  #               - dynamodb:Scan
  #               - dynamodb:Query
  #               - dynamodb:UpdateItem
  #             Resource:
  #               - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-CustomerProfile
  #               - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-CustomerContact
  #               - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-CustomerPayment
  #     Tags:
  #       Environment: !Ref Environment
  #       Application: !Ref Application
  #       Module:      !Ref Module

  # SignUpLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub /aws/lambda/${SignUpFunction}
  #     RetentionInDays: !Ref RetentionInDays

  ###############################################################################
  #    Pretoken Generation Function
  ###############################################################################
  PreTokenGenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src-pretoken
      Handler: pre_token.handler
      FunctionName: !Sub ${Application}-${Environment}-${Module}-ProducerUserPool-PreTokenGenFunction
      Environment:
        Variables:
          TABLE_NAME: !Sub ${Application}-${Environment}-ProducerUserStore
          APPLICATION: !Ref Application
          MODULE: !Ref Module
          ENVIRONMENT: !Ref Environment     
      Policies:
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-ProducerUser
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-ProducerProspect
      Tags:
        Environment: !Ref Environment
        Application: !Ref Application
        Module: !Ref Module

  PreTokenGenLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PreTokenGenFunction}
      RetentionInDays: !Ref RetentionInDays

Outputs:
  ProducerUserPoolId:
    Description: The ID for the User Pool
    Value: !Ref ProducerUserPool
